<template>
    <el-card>
        <el-row>
            <!-- 左侧：诊断结果选项 -->
            <el-col :span="12">
                <el-card title="诊断结果选项">
                    <ul class="my-list">
                        <!-- 用 item.currentIllnessId 作为 key, 以确保每条唯一 -->
                        <li v-for="(item) in diagnosisOptions" :key="item.currentIllnessId">
                            {{ item.currentIllness }}
                            <el-button @click="editDiagnosis(item)">修改</el-button>
                        </li>
                    </ul>
                </el-card>
            </el-col>

            <!-- 右侧：治疗方案选项 -->
            <el-col :span="12">
                <el-card title="治疗方案选项">
                    <ul class="my-list">
                        <li v-for="(item) in treatmentOptions" :key="item.treatmentPlanId">
                            {{ item.treatmentPlan }}
                            <el-button @click="editTreatmentPlan(item)">修改</el-button>
                        </li>
                    </ul>
                </el-card>
            </el-col>
        </el-row>

        <!-- 诊断编辑对话框 -->
        <el-dialog title="修改诊断结果" v-model:visible="diagnosisDialogVisible" width="500px">
            <el-form :model="diagnosisFormData" label-width="120px">
                <el-form-item label="诊断ID">
                    <!-- disabled 仅展示ID，不允许改 -->
                    <el-input v-model="diagnosisFormData.currentIllnessId" disabled />
                </el-form-item>
                <el-form-item label="诊断名称">
                    <el-input v-model="diagnosisFormData.currentIllness" placeholder="请输入新的诊断结果" />
                </el-form-item>
            </el-form>

            <div style="text-align: right">
                <el-button @click="diagnosisDialogVisible = false">取消</el-button>
                <el-button type="primary" @click="submitDiagnosisEdit">提交</el-button>
            </div>
        </el-dialog>

        <!-- 用于编辑“治疗方案”的弹窗 -->
        <el-dialog title="修改治疗方案" v-model:visible="dialogVisible" width="500px">
            <el-form :model="formData" ref="formRef" label-width="120px">
                <el-form-item label="治疗方案ID">
                    <el-input v-model="formData.treatmentPlanId" :disabled="true"></el-input>
                </el-form-item>
                <el-form-item label="治疗方案">
                    <el-input v-model="formData.treatmentPlan" placeholder="请输入新的治疗方案内容"></el-input>
                </el-form-item>
            </el-form>

            <div style="text-align: right">
                <el-button @click="dialogVisible = false">取消</el-button>
                <el-button type="primary" @click="submitForm">提交</el-button>
            </div>
        </el-dialog>
    </el-card>
</template>

<script setup>
import { ref, onMounted } from "vue"
import { ElMessage, ElMessageBox } from "element-plus"
import {
    getCurrentIllnessWithTreatmentPlanServe,
    updateTreatmentPlanServe,
    medicalConditionDescription
} from "@/api/user"

// ========== 诊断相关 ==========
const diagnosisOptions = ref([]) // [{ currentIllnessId, currentIllness }, ...]

// 是否显示“诊断编辑”的弹窗
const diagnosisDialogVisible = ref(false)

// 用于编辑诊断的表单数据
const diagnosisFormData = ref({
    currentIllnessId: 0,
    currentIllness: ""
})

// 点击“修改”诊断时，弹出诊断编辑对话框
const editDiagnosis = (item) => {
    //console.log(item)
    diagnosisFormData.value.currentIllnessId = item.currentIllnessId
    diagnosisFormData.value.currentIllness = item.currentIllness
    diagnosisDialogVisible.value = true
    //console.log('test', diagnosisDialogVisible.value)
}

// 提交“诊断”修改
const submitDiagnosisEdit = async () => {
    if (!diagnosisFormData.value.currentIllnessId) {
        ElMessage.warning("无效的诊断 ID")
        return
    }
    if (!diagnosisFormData.value.currentIllness) {
        ElMessage.warning("请先填写新的诊断结果")
        return
    }

    try {
        const params = {
            currentIllnessId: diagnosisFormData.value.currentIllnessId,
            currentIllness: diagnosisFormData.value.currentIllness
        }
        const res = await medicalConditionDescription(params)

        if (res.data && res.data.code === 1) {
            ElMessage.success("诊断结果更新成功")
            diagnosisDialogVisible.value = false

            // 本地更新对应项，或重新拉取接口
            const idx = diagnosisOptions.value.findIndex(
                (item) => item.currentIllnessId === params.currentIllnessId
            )
            if (idx !== -1) {
                diagnosisOptions.value[idx].currentIllness = params.currentIllness
            }
        } else {
            ElMessage.error(res.data?.msg || "更新诊断结果失败")
        }
    } catch (error) {
        console.error(error)
        // 如果使用了 confirm 而用户点了“取消”，error 会是 'cancel'
        if (error !== "cancel") {
            ElMessage.error("更新诊断结果接口出错，请检查网络或联系管理员")
        }
    }
}

// ========== 治疗方案相关 ==========

// 治疗方案选项：[{ treatmentPlanId, treatmentPlan }, ...]
const treatmentOptions = ref([])

// 用于控制“治疗方案”弹窗显示/隐藏
const dialogVisible = ref(false)

// 用于编辑治疗方案的表单数据
const formData = ref({
    treatmentPlanId: 0,
    treatmentPlan: ""
})

// 点击“修改”按钮时，弹出编辑弹窗，并将当前项赋值给 formData
const editTreatmentPlan = (item) => {
    formData.value.treatmentPlanId = item.treatmentPlanId
    formData.value.treatmentPlan = item.treatmentPlan
    dialogVisible.value = true
}

// 提交治疗方案更新
const submitForm = async () => {
    try {
        if (!formData.value.treatmentPlanId) {
            ElMessage.warning("无效的治疗方案ID")
            return
        }
        if (!formData.value.treatmentPlan) {
            ElMessage.warning("请先填写新的治疗方案")
            return
        }

        // 这里示例了一个“二次确认”弹窗
        await ElMessageBox.confirm("确认要更新该治疗方案吗？", "提示", {
            confirmButtonText: "确定",
            cancelButtonText: "取消",
            type: "warning"
        })

        // 发起 PUT 请求
        const res = await updateTreatmentPlanServe(formData.value)
        if (res.data && res.data.code === 1) {
            ElMessage.success("更新治疗方案成功")
            dialogVisible.value = false

            // 可根据实际情况，更新前端 treatmentOptions 列表或重新拉取
            const index = treatmentOptions.value.findIndex(
                (item) => item.treatmentPlanId === formData.value.treatmentPlanId
            )
            if (index !== -1) {
                treatmentOptions.value[index].treatmentPlan = formData.value.treatmentPlan
            }
        } else {
            ElMessage.error(res.data?.msg || "更新治疗方案失败")
        }
    } catch (error) {
        console.error(error)
        // 用户可能取消，也会到这里
        if (error !== "cancel") {
            ElMessage.error("调用更新接口出错，请检查网络或联系管理员")
        }
    }
}

// ========== 获取数据 ==========

const fetchDiagnosisAndTreatment = async () => {
    try {
        const res = await getCurrentIllnessWithTreatmentPlanServe()
        if (res.data.code === 1) {
            // currentIllnessList 现在假设包含 { currentIllnessId, currentIllness }
            // 如果后端还是只返回字符串，需要后端改动才能更好支持更新
            diagnosisOptions.value = res.data.data.currentIllnessList

            // 这里直接存对象，包含 { treatmentPlanId, treatmentPlan }
            treatmentOptions.value = res.data.data.treatmentPlanList
        }
    } catch (error) {
        ElMessage.error("获取诊断/治疗选项数据失败")
    }
}

// onMounted 时，拉取数据
onMounted(() => {
    fetchDiagnosisAndTreatment()
})
</script>

<style scoped>
.my-list {
    list-style: none;
    margin: 0;
    padding: 0;
}

.my-list li {
    padding: 8px 0;
    border-bottom: 1px solid #ebeef5;
}
</style>